{"version":3,"file":"static/js/425.b4e6bbff.chunk.js","mappings":"8JAAO,MCCMA,EAAY,G,aCGzB,MAuDA,EAvDiBC,KACf,MAAM,GAAEC,IAAOC,EAAAA,EAAAA,KACTC,EAAOJ,EAAUK,KAAKC,GAAKA,EAAEJ,KAAOK,SAASL,IAEnD,OAAKE,GAmBHI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,MAAA,WAASF,UAAU,YAAWC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,OACEI,IAAKR,EAAKS,MACVC,IAAKV,EAAKW,MACVN,UAAU,kBACVO,QAAQ,OACRC,SAAS,QACTC,MAAM,OACNC,OAAO,SAETR,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,kBAAiBC,SAAEN,EAAKW,SACtCJ,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,QAAAE,SAAON,EAAKgB,QACZT,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAON,EAAKiB,SAAS,mBAEvBb,EAAAA,EAAAA,KAAA,OACEC,UAAU,iBACVa,wBAAyB,CAAEC,OAAQnB,EAAKoB,YAE1ChB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,UAC7BF,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACC,GAAG,IAAIjB,UAAU,oBAAmBC,SAAC,wCAvCjDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBC,SAAA,EAClCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,4BAA2BC,SAAC,oBAG1CF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,2BAA0BC,SAAC,qDAGxCF,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACC,GAAG,IAAIjB,UAAU,MAAKC,SAAC,sB","sources":["data/blogPosts/blogPost1.js","data/blogPosts/index.js","components/BlogPost.js"],"sourcesContent":["export const blogPost1 = {\n  id: 1,\n  title: \"State Management Patterns in Distributed Systems\",\n  excerpt: \"Exploring different approaches to managing state consistency across microservices and distributed architectures.\",\n  date: \"2024-01-15\",\n  readTime: 8,\n  content: `\n    <p>In distributed systems, maintaining state consistency across multiple services presents unique challenges. This post explores the fundamental patterns used to manage state in microservices architectures.</p>\n    \n    <h2>Event Sourcing Pattern</h2>\n    <p>Event sourcing stores the state of an application as a sequence of events. Instead of storing the current state, we store all events that led to that state. This pattern provides several benefits:</p>\n    \n    <ul>\n      <li>Complete audit trail of all changes</li>\n      <li>Ability to replay events to reconstruct state</li>\n      <li>Natural fit for event-driven architectures</li>\n      <li>Easier debugging and troubleshooting</li>\n    </ul>\n    \n    <h2>CQRS (Command Query Responsibility Segregation)</h2>\n    <p>CQRS separates read and write operations into different models. Commands modify state, while queries read state. This separation allows for:</p>\n    \n    <ul>\n      <li>Optimized read and write models</li>\n      <li>Independent scaling of read and write operations</li>\n      <li>Different data structures for different use cases</li>\n      <li>Better performance for complex queries</li>\n    </ul>\n    \n    <h2>Saga Pattern</h2>\n    <p>The Saga pattern manages distributed transactions by breaking them into a series of local transactions. Each local transaction has a compensating transaction that can undo its effects.</p>\n    \n    <h3>Choreography vs Orchestration</h3>\n    <p>There are two main approaches to implementing sagas:</p>\n    \n    <ul>\n      <li><strong>Choreography:</strong> Each service knows what to do next and publishes events</li>\n      <li><strong>Orchestration:</strong> A central coordinator manages the entire process</li>\n    </ul>\n    \n    <h2>Consistency Models</h2>\n    <p>Different consistency models provide different guarantees:</p>\n    \n    <ul>\n      <li><strong>Strong Consistency:</strong> All nodes see the same data simultaneously</li>\n      <li><strong>Eventual Consistency:</strong> All nodes will eventually converge to the same state</li>\n      <li><strong>Weak Consistency:</strong> No guarantees about when consistency will be achieved</li>\n    </ul>\n    \n    <h2>Implementation Considerations</h2>\n    <p>When implementing state management patterns, consider:</p>\n    \n    <ul>\n      <li>Performance requirements</li>\n      <li>Consistency needs</li>\n      <li>Complexity vs. benefits trade-offs</li>\n      <li>Team expertise and maintenance overhead</li>\n    </ul>\n    \n    <p>Each pattern has its place in distributed systems, and the choice depends on your specific requirements and constraints.</p>\n  `\n};\n","// Empty blog posts array for Live Soon state\nexport const blogPosts = [];\n\n// Export individual posts for direct access (keeping structure for future)\nexport { blogPost1 } from './blogPost1.js';\nexport { blogPost2 } from './blogPost2.js';\nexport { blogPost3 } from './blogPost3.js';\nexport { blogPost4 } from './blogPost4.js';\nexport { blogPost5 } from './blogPost5.js';\n","import React from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { blogPosts } from '../data/blogPosts';\n\nconst BlogPost = () => {\n  const { id } = useParams();\n  const post = blogPosts.find(p => p.id === parseInt(id));\n\n  if (!post) {\n    return (\n      <div className=\"container\">\n        <div className=\"blog-post-not-found\">\n          <h1 className=\"blog-post-not-found-title\">\n            Post Not Found\n          </h1>\n          <p className=\"blog-post-not-found-text\">\n            The blog post you're looking for doesn't exist.\n          </p>\n          <Link to=\"/\" className=\"btn\">\n            Back to Home\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <article className=\"blog-post\">\n        <img \n          src={post.image} \n          alt={post.title}\n          className=\"blog-post-image\"\n          loading=\"lazy\"\n          decoding=\"async\"\n          width=\"1000\"\n          height=\"300\"\n        />\n        <div className=\"blog-post-content\">\n          <h1 className=\"blog-post-title\">{post.title}</h1>\n          <div className=\"blog-post-meta\">\n            <span>{post.date}</span>\n            <span>{post.readTime} min read</span>\n          </div>\n          <div \n            className=\"blog-post-body\"\n            dangerouslySetInnerHTML={{ __html: post.content }}\n          />\n          <div className=\"blog-post-back\">\n            <Link to=\"/\" className=\"btn btn-secondary\">\n              ‚Üê Back to All Posts\n            </Link>\n          </div>\n        </div>\n      </article>\n    </div>\n  );\n};\n\nexport default BlogPost;\n"],"names":["blogPosts","BlogPost","id","useParams","post","find","p","parseInt","_jsx","className","children","_jsxs","src","image","alt","title","loading","decoding","width","height","date","readTime","dangerouslySetInnerHTML","__html","content","Link","to"],"sourceRoot":""}